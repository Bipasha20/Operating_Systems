//Write a C program to implement merge sort using multi-threading with pthread libraries. 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define MAX_SIZE 100
// Structure for passing arguments to the thread
typedef struct {
 int* arr;
 int left;
 int right;
} ThreadArgs;
// Function to merge two subarrays
void merge(int arr[], int left, int mid, int right) {
 int i, j, k;
 int n1 = mid - left + 1;
 int n2 = right - mid;
 
 int L[n1], R[n2];
 
 for (i = 0; i < n1; i++)
 L[i] = arr[left + i];
 for (j = 0; j < n2; j++)
 R[j] = arr[mid + 1 + j];
 
 i = 0;
 j = 0;
 k = left;
 
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 arr[k] = L[i];
 i++;
 } else {
 arr[k] = R[j];
 j++;
 }
 k++;
 }
 
 while (i < n1) {
 arr[k] = L[i];
 i++;
 k++;
 }
 
 while (j < n2) {
 arr[k] = R[j];
 j++;
 k++;
 }
}
// Merge sort function
void* mergeSort(void* arg) {
 ThreadArgs* args = (ThreadArgs*) arg;
 int* arr = args->arr;
 int left = args->left;
 int right = args->right;
 if (left < right) {
 int mid = left + (right - left) / 2;
 
 // Divide the array into two halves
 ThreadArgs args1 = {arr, left, mid};
 ThreadArgs args2 = {arr, mid + 1, right};
 
 pthread_t tid1, tid2;
 
 // Create two threads for sorting two halves
 pthread_create(&tid1, NULL, mergeSort, &args1);
 pthread_create(&tid2, NULL, mergeSort, &args2);
 
 // Wait for the two threads to finish
 pthread_join(tid1, NULL);
 pthread_join(tid2, NULL);
 
 // Merge the sorted halves
 merge(arr, left, mid, right);
 }
 
 pthread_exit(NULL);
}
// Function to print the array
void printArray(int arr[], int size) {
 for (int i = 0; i < size; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int arr[MAX_SIZE];
 int size;
 
 printf("Enter the number of elements: ");
 scanf("%d", &size);
 
 printf("Enter the elements:\n");
 for (int i = 0; i < size; i++) {
 scanf("%d", &arr[i]);
 }
 
 // Create initial arguments for merge sort
 ThreadArgs args = {arr, 0, size - 1};
 
 // Create a thread for merge sort
 pthread_t tid;
 pthread_create(&tid, NULL, mergeSort, &args);
 
 // Wait for the thread to finish
 pthread_join(tid, NULL);
 
 printf("Sorted array: ");
 printArray(arr, size);
 
 return 0;
}
